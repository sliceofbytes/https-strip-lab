worker_processes auto;
events { worker_connections 1024; }

http {
  resolver 127.0.0.11 ipv6=off valid=10s;

  # HTTP Server - Main attack landing page
  server {
    listen 80;
    server_name _;

    # Log the attack for demonstration
    access_log /var/log/nginx/attack.log;

    # Main landing page with auto-redirect
    location / {
      add_header Content-Type "text/html; charset=utf-8" always;
      add_header X-Attack-Vector "DNS-Poisoning-HTTP" always;
      
      return 200 '<!DOCTYPE html>
<html><head><title>üö® DNS Poisoning Attack Demo</title>
<style>
  body { font-family: sans-serif; padding: 20px; background: #fff3cd; }
  .warning { background: #f8d7da; padding: 15px; border: 1px solid #f5c6cb; margin: 15px 0; }
  .attack { background: #ffe6e6; padding: 15px; border: 1px solid #ff0000; margin: 15px 0; }
  .demo { background: #d4edda; padding: 15px; border: 1px solid #28a745; margin: 15px 0; }
  .info { background: #d1ecf1; padding: 15px; border: 1px solid #bee5eb; margin: 15px 0; }
  .countdown { background: #fff3cd; padding: 15px; border: 2px solid #ffc107; margin: 15px 0; text-align: center; font-size: 18px; }
</style>
</head>
<body>
<h1>üö® DNS Poisoning Attack Demo</h1>

<div class="info">
<h3>üìã Current Status:</h3>
<p>You are currently on: <strong>$scheme://$host$request_uri</strong></p>
<p>This demonstrates what happens when DNS poisoning redirects users to an attacker-controlled server.</p>
</div>

<div class="warning">
<h3>‚ö†Ô∏è Attack in Progress:</h3>
<p>In a real DNS poisoning attack:</p>
<ul>
<li>User types <code>victim.com</code> (no protocol specified)</li>
<li>DNS poisoning points to attacker IP (this server)</li>
<li>User lands on attackers HTTP site instead of real site</li>
<li>All data is now vulnerable to interception</li>
</ul>
</div>

<div class="attack">
<h3>üéØ What Attackers Can Do:</h3>
<ul>
<li>Intercept all your data in plaintext</li>
<li>Steal credentials directly on this HTTP page</li>
<li>Redirect to a fake "secure" site with their own certificate</li>
<li>Inject malicious content into pages</li>
</ul>
</div>

<div class="countdown">
<h3>‚è∞ Automatic Redirect in Progress</h3>
<p>The attacker is now redirecting you to their "secure" HTTPS site...</p>
<p><strong>Redirecting in <span id="countdown">5</span> seconds</strong></p>
<p><a href="https://$host:8443/victim-site">Click here to go immediately</a></p>
</div>

<div class="demo">
<h3>üé≠ Manual Demo Options:</h3>
<p><a href="/http-phish" style="padding: 10px 15px; background: #dc3545; color: white; text-decoration: none; margin: 5px;">
üìù HTTP Credential Theft
</a></p>
<p><a href="https://$host:8443/victim-site" style="padding: 10px 15px; background: #007cba; color: white; text-decoration: none; margin: 5px;">
üîí Go to Fake HTTPS Site
</a></p>
</div>

<script>
let seconds = 5;
const countdownElement = document.getElementById("countdown");

const timer = setInterval(() => {
  seconds--;
  countdownElement.textContent = seconds;
  
  if (seconds <= 0) {
    clearInterval(timer);
    window.location.href = "https://$host:8443/victim-site";
  }
}, 1000);
</script>

</body></html>';
    }
    }
</body></html>';
    }

    # HTTP credential harvesting
    location = /http-phish {
      add_header Content-Type "text/html; charset=utf-8" always;
      return 200 '<!DOCTYPE html>
<html><head><title>victim.com - Login</title>
<style>
  body { font-family: sans-serif; padding: 20px; background: #f8f9fa; }
  .form-container { background: white; padding: 20px; border: 1px solid #ddd; max-width: 400px; margin: 20px auto; }
  input { padding: 10px; width: 100%; margin: 10px 0; border: 1px solid #ddd; }
  button { padding: 12px 20px; background: #007cba; color: white; border: none; width: 100%; }
  .warning { background: #fff3cd; padding: 10px; margin: 10px 0; border: 1px solid #ffeaa7; }
</style>
</head>
<body>
<h1>victim.com - User Login</h1>

<div class="warning">
<h3>‚ö†Ô∏è Security Notice:</h3>
<p>This connection is <strong>NOT SECURE</strong> (HTTP). Your data will be transmitted in plaintext!</p>
</div>

<div class="form-container">
<h3>Login to Your Account</h3>
<form method="get" action="/steal-http-creds">
<input type="text" name="username" placeholder="Username" required>
<input type="password" name="password" placeholder="Password" required>
<button type="submit">Login</button>
</form>
</div>

<p style="text-align: center;"><small>Many users ignore security warnings and login anyway!</small></p>
</body></html>';
    }

    # Redirect to attacker's HTTPS site (FIXED - use HTTPS not HTTP)
    location = /redirect-to-fake-https {
      return 302 https://$host:8443/victim-site;
    }

    # Show stolen HTTP credentials
    location = /steal-http-creds {
      add_header Content-Type "text/html; charset=utf-8" always;
      return 200 '<!DOCTYPE html>
<html><head><title>HTTP Attack Successful!</title>
<style>body{font-family:sans-serif;padding:20px;background:#ffcccc;}</style>
</head>
<body>
<h2>üö® HTTP Attack Successful!</h2>
<p><strong>Captured via unencrypted HTTP:</strong></p>
<ul>
<li>Username: <code>$arg_username</code></li>
<li>Password: <code>$arg_password</code></li>
<li>Method: Plaintext interception</li>
<li>Source: $remote_addr</li>
</ul>
<p>This happened because you were on HTTP instead of HTTPS!</p>
<p><a href="/redirect-to-fake-https">Now see the HTTPS version ‚Üí</a></p>
</body></html>';
    }

<p><small>Current URL: $scheme://$host$request_uri</small></p>
</body></html>';
    }

    # Default HTTP landing page
    location / {
      add_header Content-Type "text/html; charset=utf-8" always;
      add_header X-Attack-Vector "HTTPS-Downgrade-to-HTTP" always;
      
      return 200 '<!DOCTYPE html>
<html><head><title>Connection Downgraded - Security Warning</title>
<style>
  body { font-family: sans-serif; padding: 20px; background: #fff3cd; }
  .warning { background: #f8d7da; padding: 15px; border: 1px solid #f5c6cb; margin: 15px 0; }
  .attack { background: #ffe6e6; padding: 15px; border: 1px solid #ff0000; margin: 15px 0; }
</style>
</head>
<body>
<h1>‚ö†Ô∏è HTTPS Downgrade Attack in Progress</h1>

<div class="warning">
<h3>What just happened:</h3>
<ol>
<li>You accessed: <strong>$scheme://$host$request_uri</strong></li>
<li>You are now on an UNENCRYPTED HTTP connection!</li>
<li>This could be due to DNS poisoning or man-in-the-middle attack</li>
</ol>
</div>

<div class="attack">
<h3>üö® Security Risk:</h3>
<p>Your connection is vulnerable because:</p>
<ul>
<li>All data transmitted in plaintext</li>worker_processes auto;
events { worker_connections 1024; }

http {
  resolver 127.0.0.11 ipv6=off valid=10s;

  # HTTP Server - This is where victims land when HTTPS is not available
  server {
    listen 80;
    server_name _;

    # Log the attack for demonstration
    access_log /var/log/nginx/attack.log;

    location / {
      add_header Content-Type "text/html; charset=utf-8" always;
      add_header X-Attack-Vector "HTTPS-Downgrade-to-HTTP" always;
      add_header X-Original-Request "https://$host$request_uri" always;
      
      return 200 '<!DOCTYPE html>
<html><head><title>Connection Downgraded - Security Warning</title>
<style>
  body { font-family: sans-serif; padding: 20px; background: #fff3cd; }
  .warning { background: #f8d7da; padding: 15px; border: 1px solid #f5c6cb; margin: 15px 0; }
  .attack { background: #ffe6e6; padding: 15px; border: 1px solid #ff0000; margin: 15px 0; }
</style>
</head>
<body>
<h1>‚ö†Ô∏è HTTPS Downgrade Attack in Progress</h1>

<div class="warning">
<h3>What just happened:</h3>
<ol>
<li>You requested: <strong>https://$host$request_uri</strong></li>
<li>DNS poisoning pointed you to attacker server</li>
<li>No HTTPS service running ‚Üí Browser fell back to HTTP</li>
<li>You are now on an UNENCRYPTED connection!</li>
</ol>
</div>

<div class="attack">
<h3>üö® Attack Demonstration:</h3>
<p>In a real attack, this HTTP page could:</p>
<ul>
<li>Steal your credentials in plaintext</li>
<li>Inject malicious scripts</li>
<li>Redirect you to a fake "secure" site</li>
<li>Intercept all your data</li>
</ul>
</div>

<h3>Next Steps:</h3>
<p><strong>The attacker will now redirect you to their "legitimate" HTTPS site...</strong></p>
<p><a href="/redirect-to-fake-https" style="padding: 10px 20px; background: #007cba; color: white; text-decoration: none;">
Continue to "Secure" Site ‚Üí
</a></p>

<p><small>Current URL: $scheme://$host$request_uri</small></p>
</body></html>';
    }

    # Redirect to attacker's HTTPS site (with valid cert for their domain)
    location = /redirect-to-fake-https {
      return 302 https://$host:8443/victim-site;
    }

    # Direct credential harvesting on HTTP for demonstration
    location = /steal-http-creds {
      add_header Content-Type "text/html; charset=utf-8" always;
      return 200 '<!DOCTYPE html>
<html><head><title>HTTP Credential Theft</title>
<style>body{font-family:sans-serif;padding:20px;background:#ffcccc;}</style>
</head>
<body>
<h2>üö® HTTP Attack - Credentials Stolen!</h2>
<p><strong>Captured via unencrypted HTTP:</strong></p>
<ul>
<li>Username: <code>$arg_username</code></li>
<li>Password: <code>$arg_password</code></li>
<li>Method: Plaintext interception</li>
<li>Source: $remote_addr</li>
</ul>
<p>This happened because you were on HTTP instead of HTTPS!</p>
<p><a href="/redirect-to-fake-https">Now see the HTTPS version ‚Üí</a></p>
</body></html>';
    }
  }
}