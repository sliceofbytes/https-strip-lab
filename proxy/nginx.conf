worker_processes auto;
events { worker_connections 1024; }

http {
  resolver 127.0.0.11 ipv6=off valid=10s;

  # HTTP Server - Main attack landing page
  server {
    listen 80;
    server_name _;

    # Log the attack for demonstration
    access_log /var/log/nginx/attack.log;

    # Main landing page with auto-redirect
    location / {
      add_header Content-Type "text/html; charset=utf-8" always;
      add_header X-Attack-Vector "DNS-Poisoning-HTTP" always;
      
      return 200 '<!DOCTYPE html>
<html>
<head>
<title>DNS Poisoning Attack Demo</title>
<style>
body { font-family: sans-serif; padding: 20px; background: #fff3cd; }
.warning { background: #f8d7da; padding: 15px; border: 1px solid #f5c6cb; margin: 15px 0; }
.attack { background: #ffe6e6; padding: 15px; border: 1px solid #ff0000; margin: 15px 0; }
.demo { background: #d4edda; padding: 15px; border: 1px solid #28a745; margin: 15px 0; }
.info { background: #d1ecf1; padding: 15px; border: 1px solid #bee5eb; margin: 15px 0; }
.countdown { background: #fff3cd; padding: 15px; border: 2px solid #ffc107; margin: 15px 0; text-align: center; font-size: 18px; }
</style>
</head>
<body>
<h1>DNS Poisoning Attack Demo</h1>

<div class="info">
<h3>Current Status:</h3>
<p>You are currently on: <strong>$scheme://$host$request_uri</strong></p>
<p>This demonstrates what happens when DNS poisoning redirects users to an attacker-controlled server.</p>
</div>

<div class="warning">
<h3>Attack in Progress:</h3>
<p>In a real DNS poisoning attack:</p>
<ul>
<li>User types victim.com (no protocol specified)</li>
<li>DNS poisoning points to attacker IP (this server)</li>
<li>User lands on attacker HTTP site instead of real site</li>
<li>All data is now vulnerable to interception</li>
</ul>
</div>

<div class="attack">
<h3>What Attackers Can Do:</h3>
<ul>
<li>Intercept all your data in plaintext</li>
<li>Steal credentials directly on this HTTP page</li>
<li>Redirect to a fake secure site with their own certificate</li>
<li>Inject malicious content into pages</li>
</ul>
</div>

<div class="countdown">
<h3>Automatic Redirect in Progress</h3>
<p>The attacker is now redirecting you to their secure HTTPS site...</p>
<p><strong>Redirecting in <span id="countdown">5</span> seconds</strong></p>
<p><a href="/redirect-to-fake-https">Click here to go immediately</a></p>
</div>

<div class="demo">
<h3>Manual Demo Options:</h3>
<p><a href="/http-phish" style="padding: 10px 15px; background: #dc3545; color: white; text-decoration: none; margin: 5px;">HTTP Credential Theft</a></p>
<p><a href="/redirect-to-fake-https" style="padding: 10px 15px; background: #007cba; color: white; text-decoration: none; margin: 5px;">Go to Fake HTTPS Site</a></p>
</div>

<script>
var seconds = 5;
var countdownElement = document.getElementById("countdown");

var timer = setInterval(function() {
  seconds--;
  countdownElement.textContent = seconds;
  
  if (seconds <= 0) {
    clearInterval(timer);
    
    // Smart redirect: replace -80 with -8443 in the URL
    var currentHost = window.location.hostname;
    var httpsHost = currentHost.replace("-80.", "-8443.");
    var httpsUrl = "https://" + httpsHost + "/victim-site";
    
    window.location.href = httpsUrl;
  }
}, 1000);
</script>

</body>
</html>';
    }

    # HTTP credential harvesting
    location = /http-phish {
      add_header Content-Type "text/html; charset=utf-8" always;
      return 200 '<!DOCTYPE html>
<html>
<head>
<title>victim.com - Login</title>
<style>
body { font-family: sans-serif; padding: 20px; background: #f8f9fa; }
.form-container { background: white; padding: 20px; border: 1px solid #ddd; max-width: 400px; margin: 20px auto; }
input { padding: 10px; width: 100%; margin: 10px 0; border: 1px solid #ddd; }
button { padding: 12px 20px; background: #007cba; color: white; border: none; width: 100%; }
.warning { background: #fff3cd; padding: 10px; margin: 10px 0; border: 1px solid #ffeaa7; }
</style>
</head>
<body>
<h1>victim.com - User Login</h1>

<div class="warning">
<h3>Security Notice:</h3>
<p>This connection is <strong>NOT SECURE</strong> (HTTP). Your data will be transmitted in plaintext!</p>
</div>

<div class="form-container">
<h3>Login to Your Account</h3>
<form method="get" action="/steal-http-creds">
<input type="text" name="username" placeholder="Username" required>
<input type="password" name="password" placeholder="Password" required>
<button type="submit">Login</button>
</form>
</div>

<p style="text-align: center;"><small>Many users ignore security warnings and login anyway!</small></p>
</body>
</html>';
    }

    # Show stolen HTTP credentials
    location = /steal-http-creds {
      add_header Content-Type "text/html; charset=utf-8" always;
      return 200 '<!DOCTYPE html>
<html>
<head>
<title>HTTP Attack Successful!</title>
<style>body{font-family:sans-serif;padding:20px;background:#ffcccc;}</style>
</head>
<body>
<h2>HTTP Attack Successful!</h2>
<p><strong>Captured via unencrypted HTTP:</strong></p>
<ul>
<li>Username: <code>$arg_username</code></li>
<li>Password: <code>$arg_password</code></li>
<li>Method: Plaintext interception</li>
<li>Source: $remote_addr</li>
</ul>
<p>This happened because you were on HTTP instead of HTTPS!</p>
<p><a href="https://$host:8443/victim-site">Now see the HTTPS version</a></p>
</body>
</html>';
    }

    # Smart redirect that constructs the correct Play with Docker HTTPS URL
    location = /redirect-to-fake-https {
      add_header Content-Type "text/html; charset=utf-8" always;
      return 200 '<!DOCTYPE html>
<html>
<head>
<title>Redirecting to Secure Site</title>
<script>
// Smart redirect for Play with Docker URLs
var currentHost = window.location.hostname;
var httpsHost = currentHost.replace("-80.", "-8443.");
var httpsUrl = "https://" + httpsHost + "/victim-site";

// Immediate redirect
window.location.href = httpsUrl;
</script>
</head>
<body>
<p>Redirecting to secure site...</p>
</body>
</html>';
    }
  }
}