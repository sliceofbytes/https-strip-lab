worker_processes auto;
events { worker_connections 1024; }
http {
  resolver 127.0.0.11 ipv6=off valid=10s;
  resolver_timeout 2s;

  # rewrite https://host/... -> http://host/...
  map $upstream_http_location $rewritten_location {
    default $upstream_http_location;
    ~^https://([^/]+)(/?.*)$ http://$1$2;
  }

  # variable to make nginx resolve at request time (not startup)
  map "" $u_host { default "upstream"; }

  server {
    listen 80;
    server_name _;

    location / {
      proxy_pass https://$u_host:443;
      proxy_connect_timeout 2s;
      proxy_read_timeout 10s;
      proxy_send_timeout 10s;

      # SSL settings for backend connection
      proxy_ssl_server_name on;
      proxy_ssl_name $u_host;
      proxy_ssl_verify off;
      proxy_ssl_protocols TLSv1.2 TLSv1.3;

      # Hide security headers to simulate stripping
      proxy_hide_header Strict-Transport-Security;
      proxy_hide_header Content-Security-Policy;

      # Essential headers for proper proxying
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto http;
      proxy_set_header X-Forwarded-Host $host;

      # Handle redirects properly
      proxy_redirect https://$host/ http://$host/;
      proxy_redirect https://$u_host/ http://$host/;
      
      # Error handling
      proxy_next_upstream error timeout invalid_header http_502 http_503 http_504;
      proxy_intercept_errors on;
      error_page 301 302 307 308 = @handle_redirect;
    }

    location @handle_redirect {
      internal;
      add_header Location $rewritten_location always;
      return 302;
    }
  }
}