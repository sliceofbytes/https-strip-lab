worker_processes auto;
events { worker_connections 1024; }

http {
  resolver 127.0.0.11 ipv6=off valid=10s;

  # HTTP Attack Server - Initial DNS poisoning landing
  server {
    listen 80;
    server_name _;

    location / {
      add_header X-Attack-Type "DNS-Poisoned-HTTP" always;
      
      return 200 '<!DOCTYPE html>
<html><head><title>victim.local - Loading...</title>
<style>body{font-family:sans-serif;padding:20px;background:#ffe6e6;}</style>
</head>
<body>
<h1>⚠️ DNS Poisoning - Step 1</h1>
<p><strong>You requested:</strong> https://victim.local$request_uri</p>
<p><strong>You got:</strong> HTTP (unencrypted) from attacker</p>

<div style="background:#f0f0f0;padding:15px;margin:15px 0;border-left:4px solid red;">
<h3>Attack in Progress:</h3>
<ol>
<li>✅ DNS poisoning successful</li>
<li>✅ HTTPS downgraded to HTTP</li>
<li>🔄 Redirecting to "secure" attacker site...</li>
</ol>
</div>

<p><strong>Options:</strong></p>
<ul>
<li><a href="/phish">🎣 Stay on HTTP (steal credentials directly)</a></li>
<li><a href="/redirect-to-fake-https">🔒 Redirect to fake HTTPS site</a></li>
<li><a href="/compare">📊 Compare with real legitimate site</a></li>
</ul>

<p><small>Current: $scheme://$host$request_uri</small></p>
</body></html>';
    }

    # Direct credential harvesting on HTTP
    location = /phish {
      return 200 '<!DOCTYPE html>
<html><head><title>victim.local - Login</title>
<style>body{font-family:sans-serif;padding:20px;}input{padding:8px;margin:5px;width:200px;}</style>
</head>
<body>
<h2>🔓 Login to victim.local</h2>
<div style="background:#ffcccc;padding:10px;margin:10px 0;border:1px solid red;">
<strong>⚠️ HTTP Warning:</strong> This connection is not secure!
</div>
<form method="get" action="/steal-creds">
<p>Username: <input type="text" name="username" placeholder="Enter username" required></p>
<p>Password: <input type="password" name="password" placeholder="Enter password" required></p>
<p><button type="submit" style="padding:10px 20px;background:#007cba;color:white;border:none;">Login</button></p>
</form>
<p><small>Many users ignore security warnings and enter credentials anyway!</small></p>
</body></html>';
    }

    # Show stolen credentials
    location = /steal-creds {
      return 200 '<!DOCTYPE html>
<html><head><title>Credentials Stolen!</title>
<style>body{font-family:sans-serif;padding:20px;background:#ffcccc;}</style>
</head>
<body>
<h2>🚨 HTTP Attack Successful!</h2>
<p><strong>Captured via HTTP:</strong></p>
<ul>
<li>Username: <code>$arg_username</code></li>
<li>Password: <code>$arg_password</code></li>
<li>Method: Plaintext HTTP interception</li>
</ul>
<p><a href="/redirect-to-fake-https">🔒 Now try the HTTPS version</a></p>
</body></html>';
    }

    # Redirect to attacker's HTTPS site
    location = /redirect-to-fake-https {
      return 302 https://$host:8443/fake-victim;
    }

    # Link to real legitimate site
    location = /compare {
      return 302 https://$host:9443/;
    }
  }

  # Attacker's HTTPS Site - More sophisticated attack
  server {
    listen 8443 ssl;
    server_name _;

    # Attacker's certificate (looks legitimate to casual users)
    ssl_certificate /etc/nginx/certs/attacker.local.crt;
    ssl_certificate_key /etc/nginx/certs/attacker.local.key;
    ssl_protocols TLSv1.2 TLSv1.3;

    # Fake victim site with HTTPS
    location /fake-victim {
      return 200 '<!DOCTYPE html>
<html><head><title>victim.local - Secure Login</title>
<style>body{font-family:sans-serif;padding:20px;background:#e6f3ff;}</style>
</head>
<body>
<h1>🔒 "Secure" victim.local</h1>
<p><strong>This looks secure, but check the certificate!</strong></p>

<div style="background:#fff3cd;padding:15px;margin:15px 0;border-left:4px solid orange;">
<h3>🕵️ Advanced Attack Techniques:</h3>
<ul>
<li>✅ Valid HTTPS connection</li>
<li>⚠️ Certificate for different domain (attacker.local)</li>
<li>🎭 Could use lookalike domain (víctim.local, victim-secure.com)</li>
<li>📜 Could have valid cert for lookalike domain</li>
</ul>
</div>

<form method="get" action="/steal-https-creds">
<h3>Login to victim.local</h3>
<p>Username: <input type="text" name="username" placeholder="Username" style="padding:8px;width:200px;"></p>
<p>Password: <input type="password" name="password" placeholder="Password" style="padding:8px;width:200px;"></p>
<p><button type="submit" style="padding:10px 20px;background:#28a745;color:white;border:none;">Secure Login</button></p>
</form>

<p><small>Many users ignore certificate warnings if the site "looks" secure!</small></p>
</body></html>';
    }

    location = /steal-https-creds {
      return 200 '<!DOCTYPE html>
<html><head><title>HTTPS Attack Successful!</title>
<style>body{font-family:sans-serif;padding:20px;background:#ffe6e6;}</style>
</head>
<body>
<h2>🚨 HTTPS Attack Successful!</h2>
<p><strong>Captured via fake HTTPS:</strong></p>
<ul>
<li>Username: <code>$arg_username</code></li>
<li>Password: <code>$arg_password</code></li>
<li>Method: Certificate spoofing/domain confusion</li>
<li>Domain: $host (not victim.local!)</li>
</ul>
<div style="background:#f0f0f0;padding:10px;margin:10px 0;">
<strong>Why this worked:</strong> Users trusted the lock icon without checking the certificate details!
</div>
<p><a href="https://$host:9443/">🔒 Compare with REAL legitimate site</a></p>
</body></html>';
    }

    # Root of fake HTTPS site
    location = / {
      return 302 /fake-victim;
    }
  }

  # Real Legitimate Site (for comparison) - proxied to upstream
  server {
    listen 9443 ssl;
    server_name _;

    ssl_certificate /etc/nginx/certs/victim.local.crt;
    ssl_certificate_key /etc/nginx/certs/victim.local.key;
    ssl_protocols TLSv1.2 TLSv1.3;

    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    add_header X-Legitimate-Site "true" always;

    location / {
      proxy_pass https://upstream:443;
      proxy_ssl_verify off;
      proxy_set_header Host $host;
      proxy_set_header X-Forwarded-Proto https;
    }
  }
}